// Define maximum points (adjust as needed)
#define MAX_POINTS 33 

// Uniform inputs
uniform float u_numPoints;           // number of active tracking points
uniform vec2 u_points[MAX_POINTS];   // array of point coordinates (normalized 0-1 UV)
uniform float u_strength;            // force strength factor
uniform float u_mode;                // 0 = attract, 1 = repel
uniform float u_falloff;             // falloff factor (controls distance decay)
uniform float u_threshold;           // brightness threshold for blob
uniform float u_debug;               // for allowing green dots

out vec4 fragColor;

void main() {
	vec2 uv = vUV.st;
	vec4 baseColor = texture(sTD2DInputs[0], uv);
	float lum = baseColor.r;

	// Debug: visualize attractor points as red dots
	if (u_debug > 0.0) {
	for (int i = 0; i < int(u_numPoints) && i < MAX_POINTS; ++i) {
		vec2 p = vec2(u_points[i].x, 1.0 - u_points[i].y);  // flipped Y
		if (distance(uv, p) < 0.01) {
			fragColor = vec4(0.0, 1.0, 0.0, 1.0);  // Green dot
			return;
			}
		}
	}


	// If below brightness threshold, output original
	if (lum < u_threshold) {
		fragColor = baseColor;
		return;
	}

	// Calculate total displacement
	vec2 totalDisp = vec2(0.0);
	for (int i = 0; i < int(u_numPoints) && i < MAX_POINTS; ++i) {
		vec2 pointPos = vec2(u_points[i].x, 1.0 - u_points[i].y); // INVERT since GLSE has a different coordinate system to mediaPipe
		vec2 diff = pointPos - uv;
		float dist = length(diff);
		if (dist < 1e-6) continue;

		vec2 dir = diff / dist;
		float force = u_strength * exp(-u_falloff * dist * dist); // Gaussian-like falloff

		totalDisp += (u_mode < 0.5) ? dir * force : -dir * force;
	}

	vec2 displacedUV = uv - totalDisp;
	displacedUV = clamp(displacedUV, vec2(0.0), vec2(1.0));
	vec4 displacedColor = texture(sTD2DInputs[0], displacedUV);

	// Optional: fade based on original pixel brightness
	displacedColor.a = 1.0;

	fragColor = displacedColor;
}
